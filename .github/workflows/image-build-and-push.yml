name: Image build and push

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'document/**'
  workflow_dispatch:

env:
  DOCKERHUB_USER_NAME: oldrabbit736
  IMAGE_NAME: oldrabbit736/food-reservation-app:0.0.${{ github.run_number }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ steps.image-name-output.outputs.image-name }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      # workflow summary 에 build scan 결과 링크 등 유저 인터페이스를 추가하기 위한 action
      # https://github.com/marketplace/actions/gradle-build-action#build-scans
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # docker compose 이용하여 test 수행에 필요한 외부 서비스 실행
      - name: Set up test environment
        run: sh script/test-ci.sh

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # TODO: 잔여 단계 스크립트로 단순화
      - name: Build
        run: ./gradlew build --scan

      - name: Build container image
        run: docker build -f docker/app/Dockerfile -t ${{ env.IMAGE_NAME }} .

      - name: Push to container registry
        run: docker push ${{ env.IMAGE_NAME }}

      - name: Set image name output
        id: image-name-output
        run: echo "::set-output name=image-name::${{ env.IMAGE_NAME }}"

  # 2개의 environment 에 동일한 방식으로 배포하기 위해 matrix + workflow reuse 방식을 사용함.
  # matrix 에 배포할 environment 들을 지정하고 environment 당 deploy.yml workflow 가 실행되어 각 environment 에 배포됨.
  # 참고: https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows#example-matrix-strategy-with-a-reusable-workflow
  # 이렇게 시도했지만... 한 가지 문제가 있는데, 바로 parallel instance 중 하나라도 실패하면 나머지 작업도 cancel 시켜버린다는 것이다.
  # 각 작업이 서로의 성공여부에 상관없이 독립적으로 동작하게 만들고 싶었다. 따라서 이 방식은 폐기하고 job 을 2개로 나누는 방법으로 변경하였다.
  deploy-js:
    needs: build-push
    uses: ./.github/workflows/deploy.yml
    with:
      ENV_NAME: PROD_JS
      IMAGE_NAME: ${{ needs.build-push.outputs.IMAGE_NAME }}
      #IMAGE_NAME: oldrabbit736/food-reservation-app:0.0.1
      #https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows#limitations
      #https://stackoverflow.com/questions/73305126/passing-env-variable-inputs-to-a-reusable-workflow
      #https://github.com/orgs/community/discussions/26671
    secrets: inherit

  deploy-ms:
    needs: build-push
    uses: ./.github/workflows/deploy.yml
    with:
      ENV_NAME: PROD_MS
      IMAGE_NAME: ${{ needs.build-push.outputs.IMAGE_NAME }}
    secrets: inherit
