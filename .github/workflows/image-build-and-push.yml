name: Image build and push

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'document/**'
  workflow_dispatch:

env:
  DOCKERHUB_USER_NAME: oldrabbit736
  IMAGE_NAME: oldrabbit736/food-reservation-app:0.0.${{ github.run_number }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      # workflow summary 에 build scan 결과 링크 등 유저 인터페이스를 추가하기 위한 action
      # https://github.com/marketplace/actions/gradle-build-action#build-scans
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # docker compose 이용하여 test 수행에 필요한 외부 서비스 실행
      - name: Set up test environment
        run: sh script/test-ci.sh

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # TODO: 잔여 단계 스크립트로 단순화
      - name: Build
        run: ./gradlew build --scan

      - name: Build container image
        run: docker build -f docker/app/Dockerfile -t ${{ env.IMAGE_NAME }} .

      - name: Push to container registry
        run: docker push ${{ env.IMAGE_NAME }}

      # 결국 여기서... 만약 docker compose 가 실행되고 있지 않은 조건에서도
      # 아래의 스크립가 오류가 없이 다음 단계로 넘어가도록 해야 한다.
      # 즉.. 스크립트 공부가 필요하다.
      # 여기서는 env가 필요할까? 만약 compose up 할 때의 env가 여기서 남아있다면! 그렇다면 env가 필요없다.
      # env를 넣어준다고 한들... 그건 이미 돌아가고 있는 app image가 아닌 그보다 신규의 app image를 넣어주는 것이기 때문에
      # 그것을 바탕으로 compose down을 한다면 오류가 날 것이다..
      - name: Down compose in production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd food-reservation
            sh script/prod-down.sh            

      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "script/prod.sh,script/prod-down.sh,docker-compose-prod.yml"
          target: "food-reservation"

      - name: Up compose in production server
        uses: appleboy/ssh-action@master
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          JEP: ${{ secrets.JEP }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          envs: IMAGE_NAME, JEP
          script: |
            cd food-reservation
            sh script/prod.sh      
